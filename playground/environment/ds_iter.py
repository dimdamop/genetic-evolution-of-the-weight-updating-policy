import pandas as pd
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow.data import Dataset, AUTOTUNE
from .autogenerated_dataset import sample_element


NUM_PARALLEL_CALLS = AUTOTUNE


def resize_element(
    img: tf.Tensor,
    mask: tf.Tensor,
    binary_tgt: tf.Tensor,
    regression_tgt: tf.Tensor,
    height: int,
    width: int,
    return_mask: bool = True,
    return_binary_tgt: bool = True,
    return_regression_tgt: bool = True,
) -> tf.Tensor:
    img = tf.image.resize_with_pad(image=img, target_height=height, target_width=width)

    if return_mask:
        mask = tf.image.resize_with_pad(
            image=mask,
            target_height=height,
            target_width=width,
            method=tf.image.ResizeMethod.NEAREST_NEIGHBOR,
        )

    retval = [
        img,
    ]

    if return_mask:
        retval.append(mask)

    if return_binary_tgt:
        retval.append(binary_tgt)

    if return_regression_tgt:
        retval.append(regression_tgt)

    if len(retval) < 2:
        return retval[0]

    return tuple(retval)


def batch_iterator(
    batch_size: int | None,
    resize_to: tuple[int] | None,
    return_mask: bool = True,
    return_binary_tgt: bool = True,
    return_regression_tgt: bool = True,
) -> Dataset:
    dataset = Dataset.from_generator(
        sample_element,
        output_signature=(
            tf.TensorSpec(shape=[None, None, 3], dtype=tf.int32),
            tf.TensorSpec(shape=[None, None], dtype=tf.bool),
            tf.TensorSpec(shape=[], dtype=tf.int32),
            tf.TensorSpec(shape=[], dtype=tf.float32),
        ),
    )

    if resize_to is not None:
        dataset = dataset.map(
            lambda img, mask, binary_tgt, regression_tgt: resize_element(
                img, mask, binary_tgt, regression_tgt,
                height=resize_to[0],
                width=resize_to[1],
                return_mask=return_mask,
                return_binary_tgt=return_binary_tgt,
                return_regression_tgt=return_regression_tgt,
            ),
            num_parallel_calls=tf.data.AUTOTUNE,
            deterministic=False,
        )

    if batch_size is not None:
        dataset = dataset.batch(batch_size)

    return dataset
