from functools import partial

import jax
import jax.numpy as jnp
import flax.linen as nn
import numpy as np
import optax
from flax.linen.initializers import constant, orthogonal
from typing import Sequence, NamedTuple, Any
from flax.training.train_state import TrainState
import distrax
import gymnax
from wrappers import FlattenObservationWrapper, LogEnvState, LogWrapper


class ActorCritic(nn.Module):
    num_actions: Sequence[int]
    activation: str = "tanh"

    @nn.compact
    def __call__(self, x):
        """Returns two networks:
            1. The actor: it maps the input `x` to a categorical distribution of `self.num_actions`.
            2. The critic: it maps the input `x` to a floating point value.
        """

        if self.activation == "relu":
            activation = nn.relu
        elif self.activation == "tanh":
            activation = nn.tanh
        else:
            raise ValueError("Unrecognized '{=self.activation}")

        actor_mean = nn.Dense(64, kernel_init=orthogonal(np.sqrt(2)), bias_init=constant(0.0))(x)
        actor_mean = activation(actor_mean)
        actor_mean = nn.Dense(
            64, kernel_init=orthogonal(np.sqrt(2)), bias_init=constant(0.0)
        )(actor_mean)
        actor_mean = activation(actor_mean)
        actor_mean = nn.Dense(
            self.num_actions, kernel_init=orthogonal(0.01), bias_init=constant(0.0)
        )(actor_mean)

        critic = nn.Dense(64, kernel_init=orthogonal(np.sqrt(2)), bias_init=constant(0.0))(x)
        critic = activation(critic)
        critic = nn.Dense(64, kernel_init=orthogonal(np.sqrt(2)), bias_init=constant(0.0))(critic)
        critic = activation(critic)
        critic = nn.Dense(1, kernel_init=orthogonal(1.0), bias_init=constant(0.0))(critic)

        return distrax.Categorical(logits=actor_mean), jnp.squeeze(critic, axis=-1)


class Transition(NamedTuple):
    done: jnp.ndarray
    action: jnp.ndarray
    value: jnp.ndarray
    reward: jnp.ndarray
    log_prob: jnp.ndarray
    obs: jnp.ndarray
    info: jnp.ndarray


class RunnerState(NamedTuple):
    train: TrainState
    env: LogEnvState
    last_obs: jnp.ndarray
    rng: jnp.ndarray


def get_advantages(gae_and_next_value, transition: Transition, gamma: float, gae_lambda: float):
    gae, next_value = gae_and_next_value
    delta = transition.reward + gamma * next_value * (1 - transition.done) - transition.value
    gae = delta + gamma * gae_lambda * (1 - transition.done) * gae
    return (gae, transition.value), gae


def linear_schedule(count, num_minibatches: int, update_epochs: int, lr: float, num_updates: int):
    frac = 1.0 - (count // (num_minibatches * update_epochs)) / num_updates
    return lr * frac


def trajectories(network: nn.Module, unused, runner_state: RunnerState, num_envs, env_params):

    # sample an action from the distribution generated by the actor
    rng, _rng = jax.random.split(runner_state.rng)
    pi, value = network.apply(runner_state.train.params, runner_state.last_obs)
    action = pi.sample(seed=_rng)
    log_prob = pi.log_prob(action)

    # act on the environments
    rng, _rng = jax.random.split(rng)
    rng_step = jax.random.split(_rng, num_envs)
    obsv, env_state, reward, done, info = jax.vmap(env.step, in_axes=(0, 0, 0, None))(
        rng_step, runner_state.env, action, env_params
    )
    transition = Transition(
        done=done,
        action=action,
        value=value,
        reward=reward,
        log_prob=log_prob,
        obs=runner_state.last_obs,
        info=info,
    )
    runner_state = RunnerState(train=runner_state.train, env=env_state, last_obs=obsv, rng=rng)
    return runner_state, transition


def make_train(conf):
    num_updates = conf["TOTAL_TIMESTEPS"] // conf["NUM_STEPS"] // conf["NUM_ENVS"]
    minibatch_size = conf["NUM_ENVS"] * conf["NUM_STEPS"] // conf["NUM_MINIBATCHES"]
    env, env_params = gymnax.make(conf["ENV_NAME"])
    env = FlattenObservationWrapper(env)
    env = LogWrapper(env)

    def train(rng):
        # INIT NETWORK
        network = ActorCritic(env.action_space(env_params).n, activation=conf["ACTIVATION"])
        rng, _rng = jax.random.split(rng)
        init_x = jnp.zeros(env.observation_space(env_params).shape)
        network_params = network.init(_rng, init_x)
        if conf["ANNEAL_LR"]:
            sched = partial(
                linear_schedule,
                num_minibatches=conf["NUM_MINIBATCHES"],
                update_epochs=conf["UPDATE_EPOCHS"],
                lr=conf["LR"],
                num_updates=num_updates,
            )
            tx = optax.chain(
                optax.clip_by_global_norm(conf["MAX_GRAD_NORM"]),
                optax.adam(learning_rate=sched, eps=1e-5),
            )
        else:
            tx = optax.chain(
                optax.clip_by_global_norm(conf["MAX_GRAD_NORM"]),
                optax.adam(conf["LR"], eps=1e-5),
            )
        train_state = TrainState.create(apply_fn=network.apply, params=network_params, tx=tx)

        # INIT ``conf["NUM_ENVS"]`` ENVINONMENTS
        rng, _rng = jax.random.split(rng)
        reset_rng = jax.random.split(_rng, conf["NUM_ENVS"])
        obsv, env_state = jax.vmap(env.reset, in_axes=(0, None))(reset_rng, env_params)

        # TRAIN LOOP
        def _update_step(runner_state: RunnerState, unused):

            runner_state, traj_batch = jax.lax.scan(
                partial(
                    trajectories, network=network, num_envs=conf["NUM_ENVS"], env_params=env_params
                ),
                init=runner_state,
                xs=None,
                length=conf["NUM_STEPS"],
            )

            # CALCULATE ADVANTAGE
            _, last_val = network.apply(runner_state.train.params, runner_state.last_obs)

            def _calculate_gae(traj_batch, last_val):
                _, advantages = jax.lax.scan(
                    partial(
                        get_advantages,
                        gamma=conf["GAMMA"],
                        gae_lambda=conf["GAE_LAMBDA"],
                    ),
                    init=(jnp.zeros_like(last_val), last_val),
                    xs=traj_batch,
                    reverse=True,
                    unroll=16,
                )
                return advantages, advantages + traj_batch.value

            advantages, targets = _calculate_gae(traj_batch, last_val)

            # UPDATE NETWORK
            def _update_epoch(update_state, unused):
                def _update_minibatch(train_state, batch_info):
                    traj_batch, advantages, targets = batch_info

                    def _loss_fn(params, traj_batch, gae, targets):
                        # RERUN NETWORK
                        pi, value = network.apply(params, traj_batch.obs)
                        log_prob = pi.log_prob(traj_batch.action)

                        # CALCULATE VALUE LOSS
                        value_pred_clipped = (
                            traj_batch.value
                            + (value - traj_batch.value).clip(-conf["CLIP_EPS"], conf["CLIP_EPS"])
                        )
                        value_losses = jnp.square(value - targets)
                        value_losses_clipped = jnp.square(value_pred_clipped - targets)
                        value_loss = 0.5 * jnp.maximum(value_losses, value_losses_clipped).mean()

                        # CALCULATE ACTOR LOSS
                        ratio = jnp.exp(log_prob - traj_batch.log_prob)
                        gae = (gae - gae.mean()) / (gae.std() + 1e-8)
                        loss_actor1 = ratio * gae
                        loss_actor2 = (
                            jnp.clip(
                                ratio,
                                1.0 - conf["CLIP_EPS"],
                                1.0 + conf["CLIP_EPS"],
                            )
                            * gae
                        )
                        loss_actor = -jnp.minimum(loss_actor1, loss_actor2)
                        loss_actor = loss_actor.mean()
                        entropy = pi.entropy().mean()

                        total_loss = (
                            loss_actor
                            + conf["VF_COEF"] * value_loss
                            - conf["ENT_COEF"] * entropy
                        )
                        return total_loss, (value_loss, loss_actor, entropy)

                    grad_fn = jax.value_and_grad(_loss_fn, has_aux=True)
                    total_loss, grads = grad_fn(train_state.params, traj_batch, advantages, targets)
                    train_state = train_state.apply_gradients(grads=grads)
                    return train_state, total_loss

                train_state, traj_batch, advantages, targets, rng = update_state
                rng, _rng = jax.random.split(rng)
                # Batching and Shuffling
                batch_size = minibatch_size * conf["NUM_MINIBATCHES"]
                if  batch_size != conf["NUM_STEPS"] * conf["NUM_ENVS"]:
                    raise ValueError("batch size must be equal to number of steps * number of envs")
                permutation = jax.random.permutation(_rng, batch_size)
                batch = (traj_batch, advantages, targets)
                batch = jax.tree_util.tree_map(
                    lambda x: x.reshape((batch_size,) + x.shape[2:]), batch
                )
                shuffled_batch = jax.tree_util.tree_map(
                    lambda x: jnp.take(x, permutation, axis=0), batch
                )
                # Mini-batch Updates
                minibatches = jax.tree_util.tree_map(
                    lambda x: jnp.reshape(
                        x, [conf["NUM_MINIBATCHES"], -1] + list(x.shape[1:])
                    ),
                    shuffled_batch,
                )
                train_state, total_loss = jax.lax.scan(_update_minibatch, train_state, minibatches)
                update_state = (train_state, traj_batch, advantages, targets, rng)
                return update_state, total_loss
            # Updating Training State and Metrics:
            update_state = (runner_state.train, traj_batch, advantages, targets, runner_state.rng)
            update_state, loss_info = jax.lax.scan(
                _update_epoch, update_state, None, conf["UPDATE_EPOCHS"]
            )
            metric = traj_batch.info

            # Debugging mode
            if conf["DEBUG"] > 0:
                def callback(info):
                    return_values = info["returned_episode_returns"][info["returned_episode"]]
                    timesteps = info["timestep"][info["returned_episode"]] * conf["NUM_ENVS"]
                    for t in range(len(timesteps)):
                        print(f"global step={timesteps[t]}, episodic return={return_values[t]}")
                jax.debug.callback(callback, metric)

            runner_state = RunnerState(
                train=update_state[0],
                env=runner_state.env,
                last_obs=runner_state.last_obs,
                rng=update_state[-1],
            )

            return runner_state, metric

        rng, _rng = jax.random.split(rng)
        runner_state = RunnerState(train=train_state, env=env_state, last_obs=obsv, rng=_rng)
        runner_state, metric = jax.lax.scan(_update_step, runner_state, None, num_updates)
        return {"runner_state": runner_state, "metrics": metric}

    return train


if __name__ == "__main__":
    conf = {
        "LR": 2.5e-4,
        "NUM_ENVS": 4,
        "NUM_STEPS": 128,
        "TOTAL_TIMESTEPS": 5e5,
        "UPDATE_EPOCHS": 4,
        "NUM_MINIBATCHES": 4,
        "GAMMA": 0.99,
        "GAE_LAMBDA": 0.95,
        "CLIP_EPS": 0.2,
        "ENT_COEF": 0.01,
        "VF_COEF": 0.5,
        "MAX_GRAD_NORM": 0.5,
        "ACTIVATION": "tanh",
        "ENV_NAME": "CartPole-v1",
        "ANNEAL_LR": True,
        "DEBUG": 2,
    }
    rng = jax.random.PRNGKey(30)
    trainer = make_train(conf)
    if conf["DEBUG"] > 1:
        trainer = jax.jit(trainer)
    out = trainer(rng)
